<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <changeSet id="schema_report_delete" author="dfirstov" dbms="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT count(1) FROM information_schema.schemata WHERE schema_name = 'report';
            </sqlCheck>
        </preConditions>
        <sql>
            DROP SCHEMA report CASCADE;
        </sql>
    </changeSet>

    <changeSet id="schema_report_create" author="dfirstov" dbms="postgresql">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(1) FROM information_schema.schemata WHERE schema_name = 'report';
            </sqlCheck>
        </preConditions>
        <sql>
            CREATE SCHEMA report;
        </sql>
    </changeSet>

    <changeSet id="report.report_group" author="dfirstov" dbms="postgresql">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="report_group" schemaName="report"/>
            </not>
        </preConditions>
        <sql>
            CREATE TABLE report.report_group (
            id SERIAL,
            code VARCHAR,
            name VARCHAR NOT NULL
            ) WITHOUT OIDS;
        </sql>
    </changeSet>

    <changeSet id="report.idx_report_group_id" author="dfirstov" dbms="postgresql">
        <preConditions onFail="MARK_RAN">
            <not>
                <indexExists indexName="idx_report_group_id" schemaName="report"/>
            </not>
        </preConditions>
        <sql>
            CREATE UNIQUE INDEX idx_report_group_id ON report.report_group
            USING btree (id);
        </sql>
    </changeSet>

    <changeSet id="report.report" author="dfirstov" dbms="postgresql">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="report" schemaName="report"/>
            </not>
        </preConditions>
        <sql>
            CREATE TABLE report.report (
            id SERIAL,
            code VARCHAR,
            name VARCHAR NOT NULL,
            file_name VARCHAR NOT NULL,
            url VARCHAR,
            note VARCHAR(800),
            page_id VARCHAR,
            is_report_module BOOLEAN
            ) WITHOUT OIDS;
        </sql>
    </changeSet>

    <changeSet id="report.idx_report_id" author="dfirstov" dbms="postgresql">
        <preConditions onFail="MARK_RAN">
            <not>
                <indexExists indexName="idx_report_id" schemaName="report"/>
            </not>
        </preConditions>
        <sql>
            CREATE UNIQUE INDEX idx_report_id ON report.report
            USING btree (id);
        </sql>
    </changeSet>

    <changeSet id="report.idx_report_page_id" author="dfirstov" dbms="postgresql">
        <preConditions onFail="MARK_RAN">
            <not>
                <indexExists indexName="idx_report_page_id" schemaName="report"/>
            </not>
        </preConditions>
        <sql>
            CREATE UNIQUE INDEX idx_report_page_id ON report.report
            USING btree (page_id);
        </sql>
    </changeSet>

    <changeSet id="report.report_to_group" author="dfirstov" dbms="postgresql">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="report_to_group" schemaName="report"/>
            </not>
        </preConditions>
        <sql>
            CREATE TABLE report.report_to_group (
            id SERIAL,
            report_id INTEGER NOT NULL,
            group_id INTEGER NOT NULL,
            report_order INTEGER NOT NULL,
            CONSTRAINT report_to_group_group_id FOREIGN KEY (group_id)
            REFERENCES report.report_group(id)
            ON DELETE CASCADE
            ON UPDATE NO ACTION
            NOT DEFERRABLE,
            CONSTRAINT report_to_group_report_id FOREIGN KEY (report_id)
            REFERENCES report.report(id)
            ON DELETE CASCADE
            ON UPDATE NO ACTION
            NOT DEFERRABLE
            ) WITHOUT OIDS;
        </sql>
    </changeSet>

    <changeSet id="report.report_to_place" author="dfirstov" dbms="postgresql">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="report_to_place" schemaName="report"/>
            </not>
        </preConditions>
        <sql>
            CREATE TABLE report.report_to_place (
            id SERIAL NOT NULL,
            place_id VARCHAR NOT NULL,
            report_id INTEGER NOT NULL,
            report_order INTEGER NOT NULL,
            name VARCHAR,
            page_id VARCHAR,
            CONSTRAINT report_to_place_page_id FOREIGN KEY (page_id)
            REFERENCES report.report(page_id)
            ON DELETE CASCADE
            ON UPDATE NO ACTION
            NOT DEFERRABLE,
            CONSTRAINT report_to_place_report_id FOREIGN KEY (report_id)
            REFERENCES report.report(id)
            ON DELETE CASCADE
            ON UPDATE NO ACTION
            NOT DEFERRABLE
            ) WITHOUT OIDS;
        </sql>
    </changeSet>

    <changeSet id="report.idx_report_to_place_id" author="dfirstov" dbms="postgresql">
        <preConditions onFail="MARK_RAN">
            <not>
                <indexExists indexName="idx_report_to_place_id" schemaName="report"/>
            </not>
        </preConditions>
        <sql>
            CREATE UNIQUE INDEX idx_report_to_place_id ON report.report_to_place
            USING btree (id);
        </sql>
    </changeSet>

    <changeSet id="report.report_parameters" author="dfirstov" dbms="postgresql">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="report_parameters" schemaName="report"/>
            </not>
        </preConditions>
        <sql>
            CREATE TABLE report.report_parameters (
            id SERIAL,
            code VARCHAR,
            name VARCHAR NOT NULL,
            required BOOLEAN NOT NULL,
            visible BOOLEAN NOT NULL,
            report_to_place_id INTEGER NOT NULL,
            CONSTRAINT report_parameters_place_id FOREIGN KEY (report_to_place_id)
            REFERENCES report.report_to_place(id)
            ON DELETE CASCADE
            ON UPDATE NO ACTION
            NOT DEFERRABLE
            ) WITHOUT OIDS;
        </sql>
    </changeSet>

    <changeSet id="report.idx_report_parameters_id" author="dfirstov" dbms="postgresql">
        <preConditions onFail="MARK_RAN">
            <not>
                <indexExists indexName="idx_report_parameters_id" schemaName="report"/>
            </not>
        </preConditions>
        <sql>
            CREATE UNIQUE INDEX idx_report_parameters_id ON report.report_parameters
            USING btree (id);
        </sql>
    </changeSet>

    <changeSet id="fnc_set_report_order_group_for_delete" author="dfirstov">
        <sql splitStatements="false">
            <![CDATA[
                CREATE OR REPLACE FUNCTION report.fnc_set_report_order_group_for_delete (
                  _report_id integer
                )
                RETURNS pg_catalog.void AS
                $body$
                DECLARE
                _i RECORD;
                BEGIN

                FOR _i IN
                    SELECT group_id
                    FROM report.report_to_group
                    WHERE report_id = _report_id
                LOOP
                    UPDATE report.report_to_group SET report_order =
                        (SELECT COALESCE(max(report_order), 0) + 1 FROM report.report_to_group WHERE group_id = _i.group_id)
                    WHERE group_id = _i.group_id AND report_id = _report_id;

                    UPDATE report.report_to_group rp SET report_order = up.report_order
                    FROM
                    (SELECT id, row_number() OVER (ORDER BY report_order) as report_order
                        FROM report.report_to_group
                     WHERE group_id = _i.group_id) up
                    WHERE rp.id = up.id;

                END LOOP;

                END;
                $body$
                LANGUAGE 'plpgsql'
                VOLATILE
                CALLED ON NULL INPUT
                SECURITY INVOKER
                COST 100;
            ]]>
        </sql>
    </changeSet>

    <changeSet id="fnc_set_report_order_place_for_delete" author="dfirstov">
        <sql splitStatements="false">
            <![CDATA[
                CREATE OR REPLACE FUNCTION report.fnc_set_report_order_place_for_delete (
                  _report_id integer
                )
                RETURNS pg_catalog.void AS
                $body$
                DECLARE
                _i RECORD;
                BEGIN

                FOR _i IN
                    SELECT place_id
                    FROM report.report_to_place
                    WHERE report_id = _report_id
                LOOP
                    UPDATE report.report_to_place SET report_order =
                        (SELECT COALESCE(max(report_order), 0) + 1 FROM report.report_to_place WHERE place_id = _i.place_id)
                    WHERE place_id = _i.place_id AND report_id = _report_id;

                    UPDATE report.report_to_place rp SET report_order = up.report_order
                    FROM
                    (SELECT id, row_number() OVER (ORDER BY report_order) as report_order
                        FROM report.report_to_place
                     WHERE place_id = _i.place_id) up
                    WHERE rp.id = up.id;

                END LOOP;

                END;
                $body$
                LANGUAGE 'plpgsql'
                VOLATILE
                CALLED ON NULL INPUT
                SECURITY INVOKER
                COST 100;
            ]]>
        </sql>
    </changeSet>


</databaseChangeLog>