package ru.kirkazan.rmis.app.report.n2o.rest;

import org.apache.cxf.common.util.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import ru.kirkazan.rmis.app.report.n2o.backend.model.ReportHashForm;
import ru.kirkazan.rmis.app.report.n2o.backend.model.ReportSignatureForm;
import ru.kirkazan.rmis.app.report.n2o.backend.service.ReportSignatureController;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.StreamingOutput;
import java.io.IOException;
import java.io.OutputStream;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;

/**
 * @author rsadikov
 * @since 02.11.2015
 */
@Path("/signature")
@Produces("application/json;charset=UTF-8")
public class ReportSignatureRest {

    @Autowired
    private ReportSignatureController controller;

    /**
     * Returns the hash generated by the report using an algorithm GOST R 34.11
     * @param url - report url in pdf format
     * @param empPositionId - identifier of employee position
     * @return generated hash and identifier of record about this attempt to signing
     * @throws NoSuchProviderException
     * @throws NoSuchAlgorithmException
     * @throws IOException
     */
    @GET
    @Path("/hash")
    @Consumes(MediaType.APPLICATION_JSON)
    public ReportHashForm getReportHash(@QueryParam("url") String url,
                                        @QueryParam("emp_position_id") Integer empPositionId) throws NoSuchProviderException, NoSuchAlgorithmException, IOException {
        if (StringUtils.isEmpty(url)) {
            throw new IllegalArgumentException("parameter url cannot be empty");
        }
        if (empPositionId == null) {
            throw new IllegalArgumentException("parameter emp_position_id cannot be empty");
        }
        return controller.getReportHash(url, empPositionId);
    }

    /**
     * Saves detachment signature in a separate file with the extension .sig next to the generated report
     * @param form - contain identifier of record in db about this signature and signature encoded with base64
     * @return identifier of record in db about this signature
     */
    @POST
    public Integer saveSignature(ReportSignatureForm form) {
        controller.saveSignature(form);
        return form.getReportSignatureId();
    }

    /**
     * Returns the zip archive containing the report and signature
     * @param reportSignatureId - - identifier of record in db about signature
     * @return zip archive
     */
    @GET
    @Path("/zip/{id}")
    @Produces ("application/zip")
    public Response getZippedSignature(@PathParam("id") Integer reportSignatureId) {
        StreamingOutput streamingOutput = new StreamingOutput() {
            @Override
            public void write(OutputStream outputStream) throws IOException, WebApplicationException {
                controller.writeZippedSignature(reportSignatureId, outputStream);
            }
        };

        return Response.ok(streamingOutput)
                .header("Content-Disposition", "attachment; filename=report" + reportSignatureId + ".zip").build();
    }

    @GET
    @Path("/report/{id}")
    @Produces ("application/pdf")
    public Response getSignedReport(@PathParam("id") Integer reportSignatureId) {
        StreamingOutput streamingOutput = new StreamingOutput() {
            @Override
            public void write(OutputStream outputStream) throws IOException, WebApplicationException {
                controller.writeSignedReport(reportSignatureId, outputStream);
            }
        };

        return Response.ok(streamingOutput)
                .header("Content-Disposition", "inline; filename=report.pdf")
                .header("Accept-Ranges", "none").build();
    }
}
